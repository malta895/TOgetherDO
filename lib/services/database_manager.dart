import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:mobile_applications/models/base_model.dart';
import 'package:mobile_applications/services/manager_config.dart';

/// The database manager. Contains common methods for convenience
abstract class DatabaseManager<T extends BaseModel> {
  final CollectionReference<T?> firebaseCollection;

  final FirebaseFirestore firestoreInstance;

  DatabaseManager(this.firebaseCollection)
      : firestoreInstance = ManagerConfig.firebaseFirestoreInstance;

  /// Saves the instance to firestore, overwriting it if already exists
  /// It also assigns a databaseId to the model, generated by Firestore
  Future<void> saveToFirestore(T instance) async {
    final docRef = firebaseCollection.doc(instance.databaseId);
    instance.databaseId = docRef.id;
    instance.updatedAt = DateTime.now();
    await docRef.set(instance);
  }

  /// deletes the instance from firestore
  Future<void> deleteInstance(T instance) async {
    if (instance.databaseId != null) {
      await this.firebaseCollection.doc(instance.databaseId).delete();
    }
  }

  /// populates the objects that cannot be retrieved directly from database, resolving their ids
  Future<void> populateObjects(T instance);

  /// Gets an instance from the database by Uid
  Future<T?> getByUid(
    String uid, {
    throwJsonException: false,

    /// call populateObject to have all the fields of the objects populated
    callPopulateObjects: true,
  }) async {
    try {
      final queryResult = await firebaseCollection.doc(uid).get();
      final instance = queryResult.data();
      if (instance != null && callPopulateObjects)
        await populateObjects(instance);
      return instance;
    } on CheckedFromJsonException catch (e) {
      print(e.message);
      if (throwJsonException) rethrow;
      return null;
    }
  }
}
